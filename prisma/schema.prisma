generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  emailVerified  Boolean
  image          String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  UsersInClinics UsersInClinics[]
  accounts       Accounts[]
  sessions       Sessions[]

  @@map("users")
}

model Clinics {
  id             String           @id @default(uuid())
  name           String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  UsersInClinics UsersInClinics[]
  Appointments   Appointments[]
  Doctors        Doctors[]
  Patients       Patients[]

  @@map("clinics")
}

model UsersInClinics {
  userId    String   @map("user_id")
  clinicId  String   @map("clinic_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  clinic    Clinics  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, clinicId])
}

model Doctors {
  id                      String         @id @default(uuid())
  name                    String
  avatarImgUrl            String         @map("avatar_img_url")
  specialty               String
  appointmentPriceInCents Int            @map("appointment_price_in_cents")
  availableFromWeekDay    Int            @map("available_from_week_day")
  availableToWeekDay      Int            @map("available_to_week_day")
  availableFromTime       DateTime       @map("available_from_time")
  clinicId                String         @map("clinic_id")
  createdAt               DateTime       @default(now()) @map("created_at")
  updatedAt               DateTime       @updatedAt @map("updated_at")
  Appointments            Appointments[]
  clinic                  Clinics        @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@map("doctors")
}

model Patients {
  id          String         @id @default(uuid())
  name        String
  email       String         @unique
  phoneNumber String         @unique @map("phone_number")
  gender      String
  clinicId    String         @map("clinic_id")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  appointment Appointments[]
  clinic      Clinics        @relation(fields: [clinicId], references: [id])

  @@map("patients")
}

model Appointments {
  id        String   @id @default(uuid())
  date      DateTime
  patientId String   @map("patient_id")
  doctorId  String   @map("doctor_id")
  clinicId  String   @map("clinic_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  clinic    Clinics  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctor    Doctors  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient   Patients @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Sessions {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Accounts {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  Users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verifications {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
